{
  "info": {
    "title": "Agent to LiteLLM Proxy",
    "description": "Proxy service for AI agents to LiteLLM with user-specific authentication for proper billing",
    "version": "1.0.0",
    "contact": {
      "name": "API Support"
    }
  },
  "openapi": "3.0.3",
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "Agent Secret Key",
        "description": "Use your agent secret key as Bearer token"
      }
    },
    "schemas": {
      "ApiInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Agent to LiteLLM Proxy"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          },
          "description": {
            "type": "string"
          },
          "docs": {
            "type": "string",
            "format": "uri"
          },
          "health": {
            "type": "string",
            "format": "uri"
          },
          "endpoints": {
            "type": "object"
          },
          "usage": {
            "type": "object"
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ok",
              "error"
            ],
            "example": "ok"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "service": {
            "type": "string",
            "example": "agent-proxy"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          },
          "checks": {
            "type": "object",
            "properties": {
              "supabase": {
                "type": "string",
                "enum": [
                  "ok",
                  "error",
                  "not_configured"
                ]
              },
              "litellm": {
                "type": "string",
                "enum": [
                  "ok",
                  "error",
                  "not_configured"
                ]
              }
            }
          }
        }
      },
      "LLMRequest": {
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "The model to use for completion",
            "example": "gpt-4o",
            "enum": [
              "gpt-4o",
              "gpt-4",
              "gpt-3.5-turbo",
              "claude-3-sonnet"
            ]
          },
          "messages": {
            "type": "array",
            "description": "Array of message objects",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "minItems": 1
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens to generate",
            "minimum": 1,
            "maximum": 4096,
            "example": 100
          },
          "temperature": {
            "type": "number",
            "description": "Sampling temperature (0-2)",
            "minimum": 0,
            "maximum": 2,
            "example": 0.7
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to stream the response",
            "default": false
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "system",
              "user",
              "assistant"
            ],
            "description": "The role of the message author"
          },
          "content": {
            "type": "string",
            "description": "The content of the message",
            "example": "Hello, how are you?"
          }
        }
      },
      "LLMResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "chatcmpl-123"
          },
          "object": {
            "type": "string",
            "example": "chat.completion"
          },
          "created": {
            "type": "integer",
            "example": 1677652288
          },
          "model": {
            "type": "string",
            "example": "gpt-4o"
          },
          "choices": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "integer"
                },
                "message": {
                  "$ref": "#/components/schemas/Message"
                },
                "finish_reason": {
                  "type": "string",
                  "enum": [
                    "stop",
                    "length",
                    "content_filter"
                  ],
                  "example": "stop"
                }
              }
            }
          },
          "usage": {
            "type": "object",
            "properties": {
              "prompt_tokens": {
                "type": "integer",
                "example": 9
              },
              "completion_tokens": {
                "type": "integer",
                "example": 12
              },
              "total_tokens": {
                "type": "integer",
                "example": 21
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "Unauthorized"
          },
          "message": {
            "type": "string",
            "example": "Invalid agent key"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://maroon-koi-main-714e1e1.d2.zuplo.dev",
      "description": "Production"
    }
  ],
  "paths": {
        "/docs": {
      "get": {
        "summary": "API Documentation",
        "operationId": "swagger-docs",
        "tags": ["System"],
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "default",
            "module": "$import(./modules/swagger-docs)"
          }
        },
        "responses": {
          "200": {
            "description": "Swagger UI documentation",
            "content": {
             "text/html": {
               "schema": {
                 "type": "string"
               }
              }
            }
         }
       }
      }
    },
    "/": {
      "get": {
        "operationId": "api-info",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "default",
            "module": "$import(./modules/api-info)"
          }
        },
        "summary": "API Information",
        "description": "Returns basic information about the Agent Proxy API",
        "tags": [
          "System"
        ],
        "responses": {
          "200": {
            "description": "API information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInfo"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "operationId": "health-check",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "default",
            "module": "$import(./modules/health-check)"
          }
        },
        "summary": "Health check endpoint",
        "description": "Returns the health status of the API",
        "tags": [
          "System"
        ],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service is unhealthy"
          }
        }
      }
    },
    "/api/v1/agents/{userid}/messages": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "post": {
        "operationId": "proxy-agent-to-litellm",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "urlRewriteHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "rewritePattern": "${env.LITELLM_BASE_URL}/chat/completions",
              "forwardSearch": true
            }
          },
          "policies": {
            "inbound": [
              "agent-auth-proxy"
            ]
          }
        },
        "summary": "Proxy agent requests to LiteLLM",
        "description": "Accepts agent requests with secret key and forwards to LiteLLM with user-specific key for proper billing",
        "tags": [
          "Agent Proxy"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "description": "User ID for LiteLLM key lookup",
            "example": "user123"
          }
        ],
        "requestBody": {
          "description": "OpenAI-compatible LLM request payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LLMRequest"
              },
              "examples": {
                "basic_request": {
                  "summary": "Basic chat request",
                  "value": {
                    "model": "gpt-4o",
                    "messages": [
                      {
                        "role": "user",
                        "content": "Hello, how are you?"
                      }
                    ],
                    "max_tokens": 100,
                    "temperature": 0.7
                  }
                },
                "conversation": {
                  "summary": "Multi-turn conversation",
                  "value": {
                    "model": "gpt-4o",
                    "messages": [
                      {
                        "role": "system",
                        "content": "You are a helpful assistant."
                      },
                      {
                        "role": "user",
                        "content": "What is the capital of France?"
                      },
                      {
                        "role": "assistant",
                        "content": "The capital of France is Paris."
                      },
                      {
                        "role": "user",
                        "content": "What is its population?"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful LLM response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LLMResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid agent secret key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "User has no LiteLLM access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  }
}
{
  "info": {
    "title": "AI Agent Platform API",
    "description": "Unified API for agent management and chat interactions with new AMS integration",
    "version": "3.0.0",
    "contact": {
      "name": "API Support"
    }
  },
  "openapi": "3.0.3",
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "Agent Secret Key",
        "description": "Use your agent secret key as Bearer token"
      },
      "UserJWT": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "User JWT token from Supabase authentication"
      }
    },
    "schemas": {
      "ApiInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Agent Platform API"
          },
          "version": {
            "type": "string",
            "example": "3.0.0"
          },
          "description": {
            "type": "string"
          },
          "docs": {
            "type": "string",
            "format": "uri"
          },
          "health": {
            "type": "string",
            "format": "uri"
          },
          "endpoints": {
            "type": "object"
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["ok", "error"],
            "example": "ok"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "service": {
            "type": "string",
            "example": "agent-proxy"
          },
          "version": {
            "type": "string",
            "example": "3.0.0"
          },
          "checks": {
            "type": "object",
            "properties": {
              "supabase": {
                "type": "string",
                "enum": ["ok", "error", "not_configured"]
              },
              "litellm": {
                "type": "string",
                "enum": ["ok", "error", "not_configured"]
              },
              "ams": {
                "type": "string",
                "enum": ["ok", "error", "not_configured"]
              },
              "letta": {
                "type": "string",
                "enum": ["ok", "error", "not_configured"]
              }
            }
          }
        }
      },
      "LLMRequest": {
        "type": "object",
        "required": ["model", "messages"],
        "properties": {
          "model": {
            "type": "string",
            "description": "The model to use for completion",
            "example": "gpt-4o",
            "enum": ["gpt-4o", "gpt-4", "gpt-3.5-turbo", "claude-3-sonnet"]
          },
          "messages": {
            "type": "array",
            "description": "Array of message objects",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "minItems": 1
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens to generate",
            "minimum": 1,
            "maximum": 4096,
            "example": 100
          },
          "temperature": {
            "type": "number",
            "description": "Sampling temperature (0-2)",
            "minimum": 0,
            "maximum": 2,
            "example": 0.7
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to stream the response",
            "default": false
          }
        }
      },
      "Message": {
        "type": "object",
        "required": ["role", "content"],
        "properties": {
          "role": {
            "type": "string",
            "enum": ["system", "user", "assistant"],
            "description": "The role of the message author"
          },
          "content": {
            "type": "string",
            "description": "The content of the message",
            "example": "Hello, how are you?"
          }
        }
      },
      "CreateAgentRequest": {
        "type": "object",
        "required": ["template_id"],
        "properties": {
          "template_id": {
            "type": "string",
            "description": "ID of the agent template to use",
            "example": "support-agent"
          },
          "version": {
            "type": "string",
            "description": "Specific version of the template",
            "example": "1.0.0"
          },
          "use_latest": {
            "type": "boolean",
            "description": "Use the latest version of the template",
            "default": false
          },
          "agent_name": {
            "type": "string",
            "description": "Name for the created agent",
            "example": "My Support Agent"
          },
          "variables": {
            "type": "object",
            "description": "Template variables",
            "additionalProperties": true,
            "example": {
              "company_name": "Test Company",
              "support_level": "premium"
            }
          }
        }
      },
      "AgentResponse": {
        "type": "object",
        "properties": {
          "agent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "agent-9dab0385-77fc-40ec-a22a-2197011994ee"
              },
              "name": {
                "type": "string",
                "example": "My Support Agent"
              },
              "llm_config": {
                "type": "object"
              },
              "embedding_config": {
                "type": "object"
              },
              "memory": {
                "type": "object"
              }
            }
          },
          "template_checksum": {
            "type": "string",
            "description": "SHA256 checksum of the template used"
          }
        }
      },
      "TemplateValidationRequest": {
        "type": "string",
        "description": "YAML or JSON content of the agent template",
        "example": "af_version: \"1.0\"\ntemplate:\n  id: \"test-agent\"\n  name: \"Test Agent\"\n  version: \"1.0.0\""
      },
      "ValidationResponse": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "enum": ["yaml", "json"]
          },
          "validation": {
            "type": "object",
            "properties": {
              "valid": {
                "type": "boolean"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PublishResponse": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "example": "support-agent"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          },
          "checksum": {
            "type": "string",
            "description": "SHA256 checksum of the published template"
          },
          "is_latest": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "UpgradeAgentRequest": {
        "type": "object",
        "properties": {
          "target_version": {
            "type": "string",
            "description": "Target version to upgrade to",
            "example": "1.1.0"
          },
          "use_latest": {
            "type": "boolean",
            "description": "Upgrade to the latest version",
            "default": false
          },
          "dry_run": {
            "type": "boolean",
            "description": "Perform a dry run without actually upgrading",
            "default": true
          },
          "use_queue": {
            "type": "boolean",
            "description": "Queue the upgrade for background processing",
            "default": false
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": {
            "type": "string",
            "example": "Bad Request"
          },
          "message": {
            "type": "string",
            "example": "Invalid request parameters"
          }
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "operationId": "api-info",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "default",
            "module": "$import(./modules/api-info)"
          }
        },
        "summary": "API Information",
        "description": "Get basic information about the API",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "API information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInfo"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "operationId": "health-check",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "default",
            "module": "$import(./modules/health-check)"
          }
        },
        "summary": "Health Check",
        "description": "Check the health status of the API and its dependencies",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service is unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/docs": {
      "get": {
        "operationId": "swagger-docs",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "default",
            "module": "$import(./modules/swagger-docs)"
          }
        },
        "summary": "API Documentation",
        "description": "Interactive Swagger documentation",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "HTML documentation page"
          }
        }
      }
    },
    "/api/v1/agents/{userId}/messages": {
      "post": {
        "operationId": "letta-send-message",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "urlRewriteHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "rewritePattern": "${env.LETTA_BASE_URL}/v1/agents/${params.userId}/messages",
              "forwardSearch": false
            }
          },
          "policies": {
            "inbound": ["user-jwt-auth", "add-auth-headers"]
          }
        },
        "summary": "Send message to Letta agent",
        "description": "Send a message to Letta agent and get response",
        "tags": ["Letta Server"],
        "security": [{"UserJWT": []}],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID that owns the agent"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["message"],
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Message to send to the agent"
                  },
                  "stream": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent response"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "operationId": "letta-get-messages",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "urlRewriteHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "rewritePattern": "${env.LETTA_BASE_URL}/v1/agents/${params.userId}/messages",
              "forwardSearch": true
            }
          },
          "policies": {
            "inbound": ["user-jwt-auth", "add-auth-headers"]
          }
        },
        "summary": "Get agent messages",
        "description": "Get message history for Letta agent",
        "tags": ["Letta Server"],
        "security": [{"UserJWT": []}],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages"
          }
        }
      }
    },
    "/api/v1/templates/validate": {
      "post": {
        "operationId": "validate-template",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "urlRewriteHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "rewritePattern": "${env.AMS_BASE_URL}/templates/validate",
              "forwardSearch": false
            }
          },
          "policies": {
            "inbound": ["user-jwt-auth", "add-auth-headers"]
          }
        },
        "summary": "Validate agent template",
        "description": "Validate an agent template for syntax and completeness",
        "tags": ["Template Management"],
        "security": [{"UserJWT": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-yaml": {
              "schema": {
                "$ref": "#/components/schemas/TemplateValidationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateValidationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Validation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid template format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/templates/publish": {
      "post": {
        "operationId": "publish-template",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "urlRewriteHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "rewritePattern": "${env.AMS_BASE_URL}/templates/publish",
              "forwardSearch": false
            }
          },
          "policies": {
            "inbound": ["user-jwt-auth", "add-auth-headers"]
          }
        },
        "summary": "Publish agent template",
        "description": "Publish a validated agent template to the template repository",
        "tags": ["Template Management"],
        "security": [{"UserJWT": []}],
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Unique key to prevent duplicate requests"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-yaml": {
              "schema": {
                "$ref": "#/components/schemas/TemplateValidationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateValidationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template published successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - template version already exists or duplicate request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/create": {
      "post": {
        "operationId": "create-agent",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "urlRewriteHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "rewritePattern": "${env.AMS_BASE_URL}/agents/create",
              "forwardSearch": false
            }
          },
          "policies": {
            "inbound": ["user-jwt-auth", "add-auth-headers"]
          }
        },
        "summary": "Create new agent",
        "description": "Create a new Letta agent from a template via AMS",
        "tags": ["Agent Management"],
        "security": [{"UserJWT": []}],
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Unique key to prevent duplicate requests"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/{agent_id}/upgrade": {
      "post": {
        "operationId": "upgrade-agent",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "urlRewriteHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "rewritePattern": "${env.AMS_BASE_URL}/agents/${params.agent_id}/upgrade",
              "forwardSearch": false
            }
          },
          "policies": {
            "inbound": ["user-jwt-auth", "add-auth-headers"]
          }
        },
        "summary": "Upgrade agent to new template version",
        "description": "Upgrade an existing agent to a newer template version",
        "tags": ["Agent Management"],
        "security": [{"UserJWT": []}],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the agent to upgrade"
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Unique key to prevent duplicate requests"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradeAgentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upgrade completed or dry run result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plan": {
                      "type": "array",
                      "description": "Migration steps to be executed"
                    },
                    "diff": {
                      "type": "array",
                      "description": "Changes that will be made"
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "dry_run": {
                      "type": "boolean"
                    },
                    "applied": {
                      "type": "boolean"
                    },
                    "new_version": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ams/health": {
      "get": {
        "operationId": "ams-health-check",
        "x-zuplo-route": {
          "corsPolicy": "none",
          "handler": {
            "export": "urlRewriteHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "rewritePattern": "${env.AMS_BASE_URL}/health",
              "forwardSearch": false
            }
          }
        },
        "summary": "AMS Health Check",
        "description": "Check the health status of the Agent Management Service",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "AMS is healthy"
          }
        }
      }
    }
  }
}